{"version":3,"sources":["webpack:///./index.js"],"names":["console","log","axios","defaults","baseURL","refs","city","document","querySelector","icon","temp","desc","humidity","wind","weather","searchInput","searchBtn","myWeather","this","key","getDataWithAxios","cityName","params","get","then","d","data","result","showWeather","catch","error","getFetch","url","baseUrl","fetch","response","ok","json","alert","Error","classList","remove","Math","round","main","hum","speed","description","name","textContent","src","alt","addEventListener","citySearch","value"],"mappings":"8MAEAA,QAAQC,IAAI,QAASC,KAErBA,IAAMC,SAASC,QAAf,kDAEA,IAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,KAAMF,SAASC,cAAc,SAC7BE,KAAMH,SAASC,cAAc,SAC7BG,KAAMJ,SAASC,cAAc,gBAC7BI,SAAUL,SAASC,cAAc,aACjCK,KAAMN,SAASC,cAAc,SAC7BM,QAASP,SAASC,cAAc,YAChCO,YAAaR,SAASC,cAAc,eACpCQ,UAAWT,SAASC,cAAc,gBAmD9BS,EAAY,I,WA5ChB,aACEC,KAAKC,IAJI,mC,2BAMXC,iBAAA,SAAiBC,GAAU,WACrBC,EAAS,MAAMD,EAAT,UAA2BH,KAAKC,IAC1CjB,IACGqB,IAAID,GACJE,MAAK,SAAAC,GAAC,OAAIA,EAAEC,QACZF,MAAK,SAAAG,GAAM,OAAI,EAAKC,YAAYD,MAChCE,OAAM,SAAAC,GAAK,OAAI9B,QAAQ8B,MAAMA,O,EAElCC,SAAA,SAASV,GAAU,WACbW,EAAMC,qDAAgBZ,EAAN,UAAwBH,KAAKC,IACjDe,MAAMF,GACHR,MAAK,SAAAW,GAEJ,GADAnC,QAAQC,IAAIkC,GACPA,EAASC,GAIZ,OAAOD,EAASE,OAFhB,MADAC,MAAM,kBACA,IAAIC,MAAM,qBAKnBf,MAAK,SAAAE,GAAI,OAAI,EAAKE,YAAYF,O,EAEnCE,YAAA,SAAYF,GACVrB,EAAKS,QAAQ0B,UAAUC,OAAO,WAC9B,IAAIhC,EAAOiB,EAAKZ,QAAQ,GAAGL,KACvBC,EAAOgC,KAAKC,MAAMjB,EAAKkB,KAAKlC,KAAO,QACnCmC,EAAMnB,EAAKkB,KAAKhC,SAChBC,EAAOa,EAAKb,KAAKiC,MACjBnC,EAAOe,EAAKZ,QAAQ,GAAGiC,YACvBzC,EAAOoB,EAAKsB,KAEhB3C,EAAKK,KAAKuC,YAAiBvC,EAA3B,KACAL,EAAKO,SAASqC,YAAd,aAAyCJ,EAAzC,IACAxC,EAAKQ,KAAKoC,YAAV,eAAuCpC,EAAvC,OACAR,EAAKI,KAAKyC,IAAV,qCAAqDzC,EAArD,OACAJ,EAAKI,KAAK0C,IAAMxC,EAChBN,EAAKM,KAAKsC,YAActC,EACxBN,EAAKC,KAAK2C,YAAV,cAAsC3C,G,MAK1CN,QAAQC,IAAIgB,GAEZZ,EAAKW,UAAUoC,iBAAiB,SAAS,WACvC,IAAIC,EAAahD,EAAKU,YAAYuC,MAElCrC,EAAUc,SAASsB,Q","file":"main.995a9cf8f92dd0a6ee30.js","sourcesContent":["import css from './css/styles.css';\nimport axios from 'axios';\nconsole.log('axios', axios);\n\naxios.defaults.baseURL = `https://api.openweathermap.org/data/2.5/weather`;\n\nconst refs = {\n  city: document.querySelector('.city'),\n  icon: document.querySelector('.icon'),\n  temp: document.querySelector('.temp'),\n  desc: document.querySelector('.description'),\n  humidity: document.querySelector('.humidity'),\n  wind: document.querySelector('.wind'),\n  weather: document.querySelector('.weather'),\n  searchInput: document.querySelector('.search-bar'),\n  searchBtn: document.querySelector('.search-btn'),\n};\n\nlet baseUrl = `https://api.openweathermap.org/data/2.5/weather`;\nlet apiKey = `b17a2dddb01d7481fea6373f92c2e546`;\n\nclass Fetch {\n  constructor() {\n    this.key = apiKey;\n  }\n  getDataWithAxios(cityName) {\n    let params = `?q=${cityName}&appid=${this.key}`;\n    axios\n      .get(params)\n      .then(d => d.data)\n      .then(result => this.showWeather(result))\n      .catch(error => console.error(error));\n  }\n  getFetch(cityName) {\n    let url = baseUrl + `?q=${cityName}&appid=${this.key}`;\n    fetch(url)\n      .then(response => {\n        console.log(response);\n        if (!response.ok) {\n          alert('Bad Request!!!');\n          throw new Error('Bad Request!!!');\n        } else {\n          return response.json();\n        }\n      })\n      .then(data => this.showWeather(data));\n  }\n  showWeather(data) {\n    refs.weather.classList.remove('loading');\n    let icon = data.weather[0].icon;\n    let temp = Math.round(data.main.temp - 273.15);\n    let hum = data.main.humidity;\n    let wind = data.wind.speed;\n    let desc = data.weather[0].description;\n    let city = data.name;\n\n    refs.temp.textContent = `${temp}Â°C`;\n    refs.humidity.textContent = `Humidity: ${hum}%`;\n    refs.wind.textContent = `Wind speed: ${wind}km/h`;\n    refs.icon.src = `https://openweathermap.org/img/wn/${icon}.png`;\n    refs.icon.alt = desc;\n    refs.desc.textContent = desc;\n    refs.city.textContent = `Weather in ${city}`;\n  }\n}\n\nconst myWeather = new Fetch();\nconsole.log(myWeather);\n\nrefs.searchBtn.addEventListener('click', () => {\n  let citySearch = refs.searchInput.value;\n  // console.log(citySearch);\n  myWeather.getFetch(citySearch);\n  //   myWeather.getDataWithAxios(citySearch);\n});\n"],"sourceRoot":""}